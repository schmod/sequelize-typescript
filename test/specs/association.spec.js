"use strict";
/* tslint:disable:max-classes-per-file */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var chaiAsPromised = require("chai-as-promised");
var OriginSequelize = require("sequelize");
var Promise = require("bluebird");
var sequelize_1 = require("../utils/sequelize");
var index_1 = require("../../index");
var association_1 = require("../utils/association");
var common_1 = require("../utils/common");
var AllowNull_1 = require("../../lib/annotations/AllowNull");
chai_1.use(chaiAsPromised);
var Association = OriginSequelize['Association'];
describe('association', function () {
    var sequelize = sequelize_1.createSequelize(false);
    var jsForDummiesBook = {
        title: 'JS for dummies'
    };
    var crimeAndPunishmentBook = {
        title: 'Crime and Punishment'
    };
    var elisa = { name: 'elisa' };
    var robin = { name: 'robin' };
    var nelly = { name: 'nelly' };
    var brom = { name: 'brom' };
    describe('One-to-many', function () {
        function oneToManyTestSuites(Book, Page) {
            var sherlockHolmesBook = {
                title: 'Sherlock Holmes',
                pages: [
                    { content: 'Watson' },
                    { content: 'Moriaty' },
                ]
            };
            var page1 = {
                content: 'written by Oscar Wilde',
                book: {
                    title: 'The Picture of Dorian Gray'
                }
            };
            var page2 = {
                content: 'js1'
            };
            var page3 = {
                content: 'js2'
            };
            var page4 = {
                content: 'js3'
            };
            var page5 = {
                content: 'js4'
            };
            beforeEach(function () {
                sequelize.addModels([Page, Book]);
                return sequelize.sync({ force: true });
            });
            it('should create models with specified relations', function () {
                chai_1.expect(Book)
                    .to.have.property('associations')
                    .that.has.property('pages')
                    .that.is.an.instanceOf(Association['HasMany'])
                    .and.has.property('foreignKey', 'bookId');
                chai_1.expect(Page)
                    .to.have.property('associations')
                    .that.has.property('book')
                    .that.is.an.instanceOf(Association['BelongsTo'])
                    .and.has.property('foreignKey', 'bookId');
            });
            it('should create models with generated functions on its prototype', function () {
                association_1.expectAutoGeneratedFunctions(Book, { singular: 'page', plural: 'pages' });
                association_1.expectAutoGeneratedFunctions(Page, { singular: 'book' });
            });
            describe('create()', function () {
                it('should create instances and relation between', function () {
                    return Promise.all([
                        Book.create(sherlockHolmesBook, { include: [Page] })
                            .then(function (book) {
                            common_1.assertInstance(book, sherlockHolmesBook);
                        }),
                        Page.create(page1, { include: [Book] })
                            .then(function (page) {
                            common_1.assertInstance(page, page1);
                        })
                    ]);
                });
                it('should create instances without relation', function () {
                    return Book
                        .create({
                        title: 'Sherlock Holmes',
                        pages: [
                            { content: 'Watson' },
                            { content: 'Moriaty' },
                        ]
                    })
                        .then(function (book) {
                        chai_1.expect(book)
                            .to.have.property('id')
                            .that.is.not.null;
                        chai_1.expect(book)
                            .not.to.have.property('pages');
                    });
                });
            });
            describe('findById()', function () {
                it('should find instances with related instances', function () {
                    return Promise.all([
                        Book.create(sherlockHolmesBook, { include: [Page] })
                            .then(function (book) { return Book.findById(book.id, { include: [Page] }); })
                            .then(function (book) {
                            common_1.assertInstance(book, sherlockHolmesBook);
                        }),
                        Page.create(page1, { include: [Book] })
                            .then(function (page) { return Page.findById(page.id, { include: [Book] }); })
                            .then(function (page) {
                            common_1.assertInstance(page, page1);
                        })
                    ]);
                });
            });
            describe('findOne()', function () {
                it('should find instances with related instances', function () {
                    return Promise.all([
                        Book.create(sherlockHolmesBook, { include: [Page] })
                            .then(function (book) { return Book.findOne({ include: [Page], where: { id: book.id } }); })
                            .then(function (book) {
                            common_1.assertInstance(book, sherlockHolmesBook);
                        }),
                        Page.create(page1, { include: [Book] })
                            .then(function (page) { return Page.findOne({ include: [Book], where: { id: page.id } }); })
                            .then(function (page) {
                            common_1.assertInstance(page, page1);
                        })
                    ]);
                });
            });
            describe('findAll()', function () {
                it('should find instances with related instances', function () {
                    return Promise.all([
                        Book.create(sherlockHolmesBook, { include: [Page] })
                            .then(function (book) { return Book.findAll({ include: [Page], where: { id: book.id } }); })
                            .then(function (books) {
                            common_1.assertInstance(books[0], sherlockHolmesBook);
                        }),
                        Page.create(page1, { include: [Book] })
                            .then(function (page) { return Page.findAll({ include: [Book], where: { id: page.id } }); })
                            .then(function (pages) {
                            common_1.assertInstance(pages[0], page1);
                        })
                    ]);
                });
            });
            describe('$get', function () {
                it('should get related instances of source instance', function () {
                    return Book.create(sherlockHolmesBook, { include: [Page] })
                        .then(function (book) { return Book.findById(book.id); })
                        .then(function (book) {
                        return book
                            .$get('pages')
                            .then(function (pages) {
                            common_1.assertInstance(pages, sherlockHolmesBook.pages);
                        });
                    });
                });
                it('should get related instance of source instance', function () {
                    return Page.create(page1, { include: [Book] })
                        .then(function (page) { return Page.findById(page.id); })
                        .then(function (page) {
                        return page
                            .$get('book')
                            .then(function (book) {
                            common_1.assertInstance(book, page1.book);
                        });
                    });
                });
            });
            describe('$set', function () {
                it('should set relation between specified instances and source instance', function () {
                    return Promise
                        .all([
                        Book.create(jsForDummiesBook),
                        Page.create(page2),
                        Page.create(page3)
                    ])
                        .then(function (_a) {
                        var book = _a[0], pages = _a.slice(1);
                        return book
                            .$set('pages', pages)
                            .then(function () { return Book.findById(book.id, { include: [Page] }); })
                            .then(function (_book) {
                            common_1.assertInstance(_book, Object.assign({ pages: [page2, page3] }, jsForDummiesBook));
                        });
                    });
                });
                it('should override previous relations', function () {
                    return Promise
                        .all([
                        Book.create(jsForDummiesBook),
                        Page.create(page2),
                        Page.create(page3),
                        Page.create(page4),
                        Page.create(page5),
                    ])
                        .then(function (_a) {
                        var book = _a[0], pageA = _a[1], pageB = _a[2], pageC = _a[3], pageD = _a[4];
                        return book
                            .$set('pages', [pageA, pageB])
                            .then(function () { return Book.findById(book.id, { include: [Page] }); })
                            .then(function (_book) {
                            common_1.assertInstance(_book, Object.assign({ pages: [page2, page3] }, jsForDummiesBook));
                        })
                            .then(function () { return book.$set('pages', [pageC, pageD]); })
                            .then(function () { return Book.findById(book.id, { include: [Page] }); })
                            .then(function (_book) {
                            // and check, if there are overridden
                            common_1.assertInstance(_book, Object.assign({ pages: [page4, page5] }, jsForDummiesBook));
                        });
                    });
                });
                it('should set relation between specified instance and source instance', function () {
                    return Promise
                        .all([
                        Page.create(page2),
                        Book.create(jsForDummiesBook)
                    ])
                        .then(function (_a) {
                        var page = _a[0], book = _a[1];
                        return page
                            .$set('book', book)
                            .then(function () { return Page.findById(page.id, { include: [Book] }); })
                            .then(function (_page) {
                            common_1.assertInstance(_page, Object.assign({ book: jsForDummiesBook }, page2));
                        });
                    });
                });
                it('should override previous relation', function () {
                    return Promise
                        .all([
                        Page.create(page2),
                        Book.create(jsForDummiesBook),
                        Book.create(crimeAndPunishmentBook),
                    ])
                        .then(function (_a) {
                        var page = _a[0], bookA = _a[1], bookB = _a[2];
                        return page
                            .$set('book', bookA)
                            .then(function () { return Page.findById(page.id, { include: [Book] }); })
                            .then(function (_page) {
                            common_1.assertInstance(_page, Object.assign({ book: jsForDummiesBook }, page2));
                        })
                            .then(function () { return page.$set('book', bookB); })
                            .then(function () { return Page.findById(page.id, { include: [Book] }); })
                            .then(function (_page) {
                            common_1.assertInstance(_page, Object.assign({ book: crimeAndPunishmentBook }, page2));
                        });
                    });
                });
            });
            describe('$add', function () {
                it('should add relation between specified instance and source instance', function () {
                    return Promise
                        .all([
                        Book.create(jsForDummiesBook),
                        Page.create(page2),
                    ])
                        .then(function (_a) {
                        var book = _a[0], page = _a[1];
                        return book
                            .$add('page', page)
                            .then(function () { return Book.findById(book.id, { include: [Page] }); })
                            .then(function (_book) {
                            common_1.assertInstance(_book, Object.assign({ pages: [page2] }, jsForDummiesBook));
                        });
                    });
                });
                it('should add relations between specified instance and source instance', function () {
                    return Promise
                        .all([
                        Book.create(jsForDummiesBook),
                        Page.create(page2),
                        Page.create(page3),
                    ])
                        .then(function (_a) {
                        var book = _a[0], pages = _a.slice(1);
                        return book
                            .$add('pages', pages)
                            .then(function () { return Book.findById(book.id, { include: [Page] }); })
                            .then(function (_book) {
                            common_1.assertInstance(_book, Object.assign({ pages: [page2, page3] }, jsForDummiesBook));
                        });
                    });
                });
                it('should not override previous relations', function () {
                    return Promise
                        .all([
                        Book.create(jsForDummiesBook),
                        Page.create(page2),
                        Page.create(page3),
                    ])
                        .then(function (_a) {
                        var book = _a[0], pageA = _a[1], pageB = _a[2];
                        return book
                            .$add('page', pageA)
                            .then(function () { return Book.findById(book.id, { include: [Page] }); })
                            .then(function (_book) {
                            common_1.assertInstance(_book, Object.assign({ pages: [page2] }, jsForDummiesBook));
                        })
                            .then(function () { return book.$add('page', pageB); })
                            .then(function () { return Book.findById(book.id, { include: [Page] }); })
                            .then(function (_book) {
                            // ... and check, if both pages exist
                            common_1.assertInstance(_book, Object.assign({ pages: [page2, page3] }, jsForDummiesBook));
                        });
                    });
                });
            });
            describe('$create', function () {
                it('should create new instance and add relation between new instance and source instance (has many)', function () {
                    return Book.create(jsForDummiesBook)
                        .then(function (book) {
                        return book
                            .$create('page', page2)
                            .then(function (page) {
                            common_1.assertInstance(page, page2);
                        })
                            .then(function () { return Book.findById(book.id, { include: [Page] }); })
                            .then(function (_book) {
                            common_1.assertInstance(_book, Object.assign({ pages: [page2] }, jsForDummiesBook));
                        });
                    });
                });
                it('should create new instance and add relation between new instance and source instance (belongs to)', function () {
                    return Page.create(page3)
                        .then(function (page) {
                        return page
                            .$create('book', jsForDummiesBook)
                            .then(function () { return Page.findById(page.id, { include: [Book] }); })
                            .then(function (_page) {
                            common_1.assertInstance(_page, Object.assign({ book: jsForDummiesBook }, page3));
                        });
                    });
                });
            });
            describe('$has', function () {
                it('should return true due to relation between specified instances and source instance', function () {
                    return Book.create(sherlockHolmesBook, { include: [Page] })
                        .then(function (book) {
                        return Book
                            .findById(book.id)
                            .then(function (_book) { return _book.$has('pages', book.pages); })
                            .then(function (result) {
                            chai_1.expect(result).to.be.true;
                        });
                    });
                });
                it('should return false due to no relation between specified instance and source instance', function () {
                    return Promise
                        .all([
                        Book.create(sherlockHolmesBook, { include: [Page] }),
                        Page.create(page3)
                    ])
                        .then(function (_a) {
                        var book = _a[0], page = _a[1];
                        return Book
                            .findById(book.id)
                            .then(function (_book) { return _book.$has('pages', page); })
                            .then(function (result) {
                            chai_1.expect(result).to.be.false;
                        });
                    });
                });
            });
            describe('$count', function () {
                it('should return number of specified relations', function () {
                    return Book.create(sherlockHolmesBook, { include: [Page] })
                        .then(function (book) {
                        return Book
                            .findById(book.id)
                            .then(function (_book) { return _book.$count('pages'); })
                            .then(function (result) {
                            chai_1.expect(result).to.equal(sherlockHolmesBook.pages.length);
                        });
                    });
                });
                it('should return 0, since source instance has no relations', function () {
                    return Book.create(sherlockHolmesBook)
                        .then(function (book) {
                        return Book
                            .findById(book.id)
                            .then(function (_book) { return _book.$count('pages'); })
                            .then(function (result) {
                            chai_1.expect(result).to.equal(0);
                        });
                    });
                });
            });
            describe('$remove', function () {
                it('should remove relation between specified instance and source instance', function () {
                    return Book.create(sherlockHolmesBook, { include: [Page] })
                        .then(function (book) {
                        return Book
                            .findById(book.id, { include: [Page] })
                            .then(function (_book) {
                            common_1.assertInstance(_book, sherlockHolmesBook);
                            return _book.$remove('page', _book.pages[0]);
                        })
                            .then(function () { return Book.findById(book.id, { include: [Page] }); })
                            .then(function (_book) {
                            common_1.assertInstance(_book, {
                                title: sherlockHolmesBook.title,
                                pages: [sherlockHolmesBook.pages[1]]
                            });
                        });
                    });
                });
                it('should remove relations between specified instances and source instance', function () {
                    return Book.create(sherlockHolmesBook, { include: [Page] })
                        .then(function (book) {
                        return Book
                            .findById(book.id, { include: [Page] })
                            .then(function (_book) {
                            common_1.assertInstance(_book, sherlockHolmesBook);
                            return _book.$remove('pages', _book.pages);
                        })
                            .then(function () { return Book.findById(book.id, { include: [Page] }); })
                            .then(function (_book) {
                            common_1.assertInstance(_book, {
                                title: sherlockHolmesBook.title
                            });
                        });
                    });
                });
            });
        }
        describe('resolve foreign keys automatically', function () {
            var Book = /** @class */ (function (_super) {
                __extends(Book, _super);
                function Book() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Book.prototype, "title", void 0);
                __decorate([
                    index_1.HasMany(function () { return Page; }),
                    __metadata("design:type", Array)
                ], Book.prototype, "pages", void 0);
                Book = __decorate([
                    index_1.Table
                ], Book);
                return Book;
            }(index_1.Model));
            var Page = /** @class */ (function (_super) {
                __extends(Page, _super);
                function Page() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column(index_1.DataType.TEXT),
                    __metadata("design:type", String)
                ], Page.prototype, "content", void 0);
                __decorate([
                    index_1.ForeignKey(function () { return Book; }),
                    __metadata("design:type", Number)
                ], Page.prototype, "bookId", void 0);
                __decorate([
                    index_1.BelongsTo(function () { return Book; }),
                    __metadata("design:type", Book)
                ], Page.prototype, "book", void 0);
                Page = __decorate([
                    index_1.Table
                ], Page);
                return Page;
            }(index_1.Model));
            oneToManyTestSuites(Book, Page);
        });
        describe('set foreign keys explicitly', function () {
            var Book2 = /** @class */ (function (_super) {
                __extends(Book2, _super);
                function Book2() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Book2.prototype, "title", void 0);
                __decorate([
                    index_1.HasMany(function () { return Page2; }, 'bookId'),
                    __metadata("design:type", Array)
                ], Book2.prototype, "pages", void 0);
                Book2 = __decorate([
                    index_1.Table
                ], Book2);
                return Book2;
            }(index_1.Model));
            var Page2 = /** @class */ (function (_super) {
                __extends(Page2, _super);
                function Page2() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column(index_1.DataType.TEXT),
                    __metadata("design:type", String)
                ], Page2.prototype, "content", void 0);
                __decorate([
                    index_1.BelongsTo(function () { return Book2; }, 'bookId'),
                    __metadata("design:type", Book2)
                ], Page2.prototype, "book", void 0);
                Page2 = __decorate([
                    index_1.Table
                ], Page2);
                return Page2;
            }(index_1.Model));
            oneToManyTestSuites(Book2, Page2);
        });
        function oneToManyWithOptionsTestSuites(Book, Page, alternateName) {
            if (alternateName === void 0) { alternateName = false; }
            var foreignKey = alternateName ? 'book_id' : 'bookId';
            beforeEach(function () {
                sequelize.addModels([Page, Book]);
                return sequelize.sync({ force: true });
            });
            it('should create models with specified relations', function () {
                chai_1.expect(Book)
                    .to.have.property('associations')
                    .that.has.property('pages')
                    .that.is.an.instanceOf(Association['HasMany'])
                    .which.includes({ foreignKey: foreignKey })
                    .and.has.property('foreignKeyAttribute')
                    .which.includes({ allowNull: false, name: foreignKey });
                chai_1.expect(Book)
                    .to.have.property('associations')
                    .that.has.property('pages')
                    .that.has.property('options')
                    .with.property('onDelete', 'CASCADE');
                chai_1.expect(Page)
                    .to.have.property('associations')
                    .that.has.property('book')
                    .that.is.an.instanceOf(Association['BelongsTo'])
                    .which.includes({ foreignKey: foreignKey })
                    .and.has.property('foreignKeyAttribute')
                    .which.includes({ allowNull: false, name: foreignKey });
                chai_1.expect(Page)
                    .to.have.property('associations')
                    .that.has.property('book')
                    .that.has.property('options')
                    .with.property('onDelete', 'CASCADE');
            });
            describe('create()', function () {
                it('should fail creating instances that require a primary key', function () {
                    var page = {
                        content: 'written by Oscar Wilde',
                        book: {
                            title: 'The Picture of Dorian Gray'
                        }
                    };
                    return Page.create(page, { include: [Book] })
                        .catch(function (err) { return chai_1.expect(err.message).to.eq("notNull Violation: " + foreignKey + " cannot be null"); });
                });
                it('should create instances that require a parent primary key', function () {
                    var book = {
                        title: 'Sherlock Holmes',
                        pages: [
                            { content: 'Watson' },
                            { content: 'Moriaty' },
                        ]
                    };
                    return Book.create(book, { include: [Page] })
                        .then(function (actual) {
                        chai_1.expect(actual.id).to.be.gt(0);
                        chai_1.expect(actual.title).to.eq(book.title);
                        chai_1.expect(actual.pages).to.have.lengthOf(2);
                        chai_1.expect(actual.pages[0].id).to.be.gt(0);
                        chai_1.expect(actual.pages[0].content).to.eq(book.pages[0].content);
                        chai_1.expect(actual.pages[1].id).to.be.gt(0);
                        chai_1.expect(actual.pages[1].content).to.eq(book.pages[1].content);
                    });
                });
            });
        }
        describe('resolve foreign keys automatically with association options', function () {
            var Book3 = /** @class */ (function (_super) {
                __extends(Book3, _super);
                function Book3() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Book3.prototype, "title", void 0);
                __decorate([
                    index_1.HasMany(function () { return Page3; }, { foreignKey: { allowNull: false }, onDelete: 'CASCADE' }),
                    __metadata("design:type", Array)
                ], Book3.prototype, "pages", void 0);
                Book3 = __decorate([
                    index_1.Table
                ], Book3);
                return Book3;
            }(index_1.Model));
            var Page3 = /** @class */ (function (_super) {
                __extends(Page3, _super);
                function Page3() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column(index_1.DataType.TEXT),
                    __metadata("design:type", String)
                ], Page3.prototype, "content", void 0);
                __decorate([
                    index_1.ForeignKey(function () { return Book3; }),
                    __metadata("design:type", Number)
                ], Page3.prototype, "bookId", void 0);
                __decorate([
                    index_1.BelongsTo(function () { return Book3; }, { foreignKey: { allowNull: false }, onDelete: 'CASCADE' }),
                    __metadata("design:type", Book3)
                ], Page3.prototype, "book", void 0);
                Page3 = __decorate([
                    index_1.Table
                ], Page3);
                return Page3;
            }(index_1.Model));
            oneToManyWithOptionsTestSuites(Book3, Page3);
        });
        describe('set foreign keys explicitly with association options', function () {
            var Book4 = /** @class */ (function (_super) {
                __extends(Book4, _super);
                function Book4() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Book4.prototype, "title", void 0);
                __decorate([
                    index_1.HasMany(function () { return Page4; }, { foreignKey: { allowNull: false, name: 'book_id' }, onDelete: 'CASCADE' }),
                    __metadata("design:type", Array)
                ], Book4.prototype, "pages", void 0);
                Book4 = __decorate([
                    index_1.Table
                ], Book4);
                return Book4;
            }(index_1.Model));
            var Page4 = /** @class */ (function (_super) {
                __extends(Page4, _super);
                function Page4() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column(index_1.DataType.TEXT),
                    __metadata("design:type", String)
                ], Page4.prototype, "content", void 0);
                __decorate([
                    index_1.ForeignKey(function () { return Book4; }),
                    __metadata("design:type", Number)
                ], Page4.prototype, "bookId", void 0);
                __decorate([
                    index_1.BelongsTo(function () { return Book4; }, { foreignKey: { allowNull: false, name: 'book_id' }, onDelete: 'CASCADE' }),
                    __metadata("design:type", Book4)
                ], Page4.prototype, "book", void 0);
                Page4 = __decorate([
                    index_1.Table
                ], Page4);
                return Page4;
            }(index_1.Model));
            oneToManyWithOptionsTestSuites(Book4, Page4, true);
        });
        describe('set foreign keys explicitly via options', function () {
            var Book5 = /** @class */ (function (_super) {
                __extends(Book5, _super);
                function Book5() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Book5.prototype, "title", void 0);
                __decorate([
                    index_1.HasMany(function () { return Page5; }, { foreignKey: 'bookId' }),
                    __metadata("design:type", Array)
                ], Book5.prototype, "pages", void 0);
                Book5 = __decorate([
                    index_1.Table
                ], Book5);
                return Book5;
            }(index_1.Model));
            var Page5 = /** @class */ (function (_super) {
                __extends(Page5, _super);
                function Page5() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column(index_1.DataType.TEXT),
                    __metadata("design:type", String)
                ], Page5.prototype, "content", void 0);
                __decorate([
                    index_1.BelongsTo(function () { return Book5; }, { foreignKey: 'bookId' }),
                    __metadata("design:type", Book5)
                ], Page5.prototype, "book", void 0);
                Page5 = __decorate([
                    index_1.Table
                ], Page5);
                return Page5;
            }(index_1.Model));
            oneToManyTestSuites(Book5, Page5);
        });
    });
    describe('Many-to-many', function () {
        function manyToManyTestSuites(Book, Author, AuthorBook) {
            var models = [Book, Author];
            if (AuthorBook) {
                models.push(AuthorBook);
            }
            sequelize.addModels(models);
            var sherlockHolmesBook = {
                title: 'Sherlock Holmes',
                authors: [
                    { name: 'Sir Arthur Conan Doyle' },
                    { name: 'No Ghost' },
                ]
            };
            var julesVerne = {
                name: 'Jules Verne',
                books: [
                    { title: 'Journey to the Center of the Earth' },
                    { title: 'Twenty Thousand Leagues Under the Sea' },
                ]
            };
            beforeEach(function () { return sequelize.sync({ force: true }); });
            it('should create models with specified relations', function () {
                chai_1.expect(Book)
                    .to.have.property('associations')
                    .that.has.property('authors')
                    .that.is.an.instanceOf(Association['BelongsToMany'])
                    .and.has.property('foreignKey', 'bookId');
                chai_1.expect(Author)
                    .to.have.property('associations')
                    .that.has.property('books')
                    .that.is.an.instanceOf(Association['BelongsToMany'])
                    .and.has.property('foreignKey', 'authorId');
            });
            it('should create models with generated functions on its prototype', function () {
                association_1.expectAutoGeneratedFunctions(Book, { singular: 'author', plural: 'authors' });
                association_1.expectAutoGeneratedFunctions(Author, { singular: 'book', plural: 'books' });
            });
            describe('create()', function () {
                it('should create instances and relation between', function () {
                    return Promise.all([
                        Book.create(sherlockHolmesBook, { include: [Author] })
                            .then(function (book) {
                            common_1.assertInstance(book, sherlockHolmesBook);
                        }),
                        Author.create(julesVerne, { include: [Book] })
                            .then(function (author) {
                            common_1.assertInstance(author, julesVerne);
                        })
                    ]);
                });
                it('should create instances without relation', function () {
                    return Author.create(julesVerne)
                        .then(function (author) {
                        common_1.assertInstance(author, { name: julesVerne.name });
                    });
                });
            });
            describe('findById()', function () {
                it('should find instances with related instances', function () {
                    return Promise.all([
                        Book.create(sherlockHolmesBook, { include: [Author] })
                            .then(function (book) { return Book.findById(book.id, { include: [Author] }); })
                            .then(function (book) {
                            common_1.assertInstance(book, sherlockHolmesBook);
                        }),
                        Author.create(julesVerne, { include: [Book] })
                            .then(function (author) { return Author.findById(author.id, { include: [Book] }); })
                            .then(function (author) {
                            common_1.assertInstance(author, julesVerne);
                        })
                    ]);
                });
            });
            describe('findOne()', function () {
                it('should find instances with related instances', function () {
                    return Promise.all([
                        Book.create(sherlockHolmesBook, { include: [Author] })
                            .then(function (book) { return Book.findOne({ include: [Author], where: { id: book.id } }); })
                            .then(function (book) {
                            common_1.assertInstance(book, sherlockHolmesBook);
                        }),
                        Author.create(julesVerne, { include: [Book] })
                            .then(function (author) { return Author.findOne({ include: [Book], where: { id: author.id } }); })
                            .then(function (author) {
                            common_1.assertInstance(author, julesVerne);
                        })
                    ]);
                });
            });
            describe('findAll()', function () {
                it('should find instances with related instances', function () {
                    return Promise.all([
                        Book.create(sherlockHolmesBook, { include: [Author] })
                            .then(function (book) { return Book.findAll({ include: [Author], where: { id: book.id } }); })
                            .then(function (books) {
                            common_1.assertInstance(books[0], sherlockHolmesBook);
                        }),
                        Author.create(julesVerne, { include: [Book] })
                            .then(function (author) { return Author.findAll({ include: [Book], where: { id: author.id } }); })
                            .then(function (authors) {
                            common_1.assertInstance(authors[0], julesVerne);
                        })
                    ]);
                });
            });
            describe('$get', function () {
                it('should get related instances of source instance', function () {
                    return Promise
                        .all([
                        Book.create(sherlockHolmesBook, { include: [Author] })
                            .then(function (book) { return Book.findById(book.id); })
                            .then(function (book) {
                            return book
                                .$get('authors')
                                .then(function (authors) {
                                common_1.assertInstance(authors, sherlockHolmesBook.authors);
                            });
                        }),
                        Author.create(julesVerne, { include: [Book] })
                            .then(function (author) { return Author.findById(author.id); })
                            .then(function (author) {
                            return author
                                .$get('books')
                                .then(function (books) {
                                common_1.assertInstance(books, julesVerne.books);
                            });
                        })
                    ]);
                });
            });
            describe('$set', function () {
                it('should set relation between specified instances and source instance', function () {
                    return Promise
                        .all([
                        Book.create(jsForDummiesBook),
                        Author.create(elisa),
                        Author.create(robin)
                    ])
                        .then(function (_a) {
                        var book = _a[0], authors = _a.slice(1);
                        return book
                            .$set('authors', authors)
                            .then(function () { return Book.findById(book.id, { include: [Author] }); })
                            .then(function (_book) {
                            common_1.assertInstance(_book, Object.assign({ authors: [elisa, robin] }, jsForDummiesBook));
                        });
                    });
                });
                it('should override previous relations', function () {
                    return Promise
                        .all([
                        Book.create(jsForDummiesBook),
                        Author.create(elisa),
                        Author.create(nelly),
                        Author.create(brom),
                        Author.create(robin),
                    ])
                        .then(function (_a) {
                        var book = _a[0], _elisa = _a[1], _nelly = _a[2], _brom = _a[3], _robin = _a[4];
                        return book
                            .$set('authors', [_elisa, _nelly])
                            .then(function () { return Book.findById(book.id, { include: [Author] }); })
                            .then(function (_book) {
                            common_1.assertInstance(_book, Object.assign({ authors: [elisa, nelly] }, jsForDummiesBook));
                        })
                            .then(function () { return book.$set('authors', [_brom, _robin]); })
                            .then(function () { return Book.findById(book.id, { include: [Author] }); })
                            .then(function (_book) {
                            // and check, if there are overridden
                            common_1.assertInstance(_book, Object.assign({ authors: [brom, robin] }, jsForDummiesBook));
                        });
                    });
                });
            });
            describe('$add', function () {
                it('should add relation between specified instance and source instance', function () {
                    return Promise
                        .all([
                        Book.create(jsForDummiesBook),
                        Author.create(elisa),
                    ])
                        .then(function (_a) {
                        var book = _a[0], _elisa = _a[1];
                        return book
                            .$add('author', _elisa)
                            .then(function () { return Book.findById(book.id, { include: [Author] }); })
                            .then(function (_book) {
                            common_1.assertInstance(_book, Object.assign({ authors: [elisa] }, jsForDummiesBook));
                        });
                    });
                });
                it('should add relations between specified instance and source instance', function () {
                    return Promise
                        .all([
                        Book.create(jsForDummiesBook),
                        Author.create(elisa),
                        Author.create(brom),
                    ])
                        .then(function (_a) {
                        var book = _a[0], authors = _a.slice(1);
                        return book
                            .$add('authors', authors)
                            .then(function () { return Book.findById(book.id, { include: [Author] }); })
                            .then(function (_book) {
                            common_1.assertInstance(_book, Object.assign({ authors: [elisa, brom] }, jsForDummiesBook));
                        });
                    });
                });
                it('should not override previous relations', function () {
                    return Promise
                        .all([
                        Book.create(jsForDummiesBook),
                        Author.create(elisa),
                        Author.create(brom),
                    ])
                        .then(function (_a) {
                        var book = _a[0], _elisa = _a[1], _brom = _a[2];
                        return book
                            .$add('author', _elisa)
                            .then(function () { return Book.findById(book.id, { include: [Author] }); })
                            .then(function (_book) {
                            common_1.assertInstance(_book, Object.assign({ authors: [elisa] }, jsForDummiesBook));
                        })
                            .then(function () { return book.$add('author', _brom); })
                            .then(function () { return Book.findById(book.id, { include: [Author] }); })
                            .then(function (_book) {
                            // ... and check, if both authors exist
                            common_1.assertInstance(_book, Object.assign({ authors: [elisa, brom] }, jsForDummiesBook));
                        });
                    });
                });
            });
            describe('$create', function () {
                it('should create new instance and add relation between new instance and source instance (has many)', function () {
                    return Book.create(jsForDummiesBook)
                        .then(function (book) {
                        return book
                            .$create('author', elisa)
                            .then(function (author) {
                            common_1.assertInstance(author, elisa);
                        })
                            .then(function () { return Book.findById(book.id, { include: [Author] }); })
                            .then(function (_book) {
                            common_1.assertInstance(_book, Object.assign({ authors: [elisa] }, jsForDummiesBook));
                        });
                    });
                });
                it('should create new instance and add relation between new instance and source instance (belongs to)', function () {
                    return Author.create(elisa)
                        .then(function (author) {
                        return author
                            .$create('book', jsForDummiesBook)
                            .then(function (book) {
                            common_1.assertInstance(book, jsForDummiesBook);
                        })
                            .then(function () { return Author.findById(author.id, { include: [Book] }); })
                            .then(function (_author) {
                            common_1.assertInstance(_author, Object.assign({ books: [jsForDummiesBook] }, elisa));
                        });
                    });
                });
            });
            describe('$has', function () {
                it('should return true due to relation between specified instances and source instance', function () {
                    return Book.create(sherlockHolmesBook, { include: [Author] })
                        .then(function (book) {
                        return Book
                            .findById(book.id)
                            .then(function (_book) { return _book.$has('authors', book.authors); })
                            .then(function (result) {
                            chai_1.expect(result).to.be.true;
                        });
                    });
                });
                it('should return false due to no relation between specified instance and source instance', function () {
                    return Promise
                        .all([
                        Book.create(sherlockHolmesBook, { include: [Author] }),
                        Author.create(elisa)
                    ])
                        .then(function (_a) {
                        var book = _a[0], author = _a[1];
                        return Book
                            .findById(book.id)
                            .then(function (_book) { return _book.$has('authors', author); })
                            .then(function (result) {
                            chai_1.expect(result).to.be.false;
                        });
                    });
                });
            });
            describe('$count', function () {
                it('should return number of specified relations', function () {
                    return Book.create(sherlockHolmesBook, { include: [Author] })
                        .then(function (book) {
                        return Book
                            .findById(book.id)
                            .then(function (_book) { return _book.$count('authors'); })
                            .then(function (result) {
                            chai_1.expect(result).to.equal(sherlockHolmesBook.authors.length);
                        });
                    });
                });
                it('should return 0, since source instance has no relations', function () {
                    return Author.create(elisa)
                        .then(function (author) {
                        return Author
                            .findById(author.id)
                            .then(function (_author) { return _author.$count('books'); })
                            .then(function (result) {
                            chai_1.expect(result).to.equal(0);
                        });
                    });
                });
            });
            describe('$remove', function () {
                it('should remove relation between specified instance and source instance', function () {
                    return Book.create(sherlockHolmesBook, { include: [Author] })
                        .then(function (book) {
                        return Book
                            .findById(book.id, { include: [Author] })
                            .then(function (_book) {
                            common_1.assertInstance(_book, sherlockHolmesBook);
                            return _book.$remove('author', _book.authors[0]);
                        })
                            .then(function () { return Book.findById(book.id, { include: [Author] }); })
                            .then(function (_book) {
                            common_1.assertInstance(_book, {
                                title: sherlockHolmesBook.title,
                                authors: [sherlockHolmesBook.authors[1]]
                            });
                        });
                    });
                });
                it('should remove relations between specified instances and source instance', function () {
                    return Author.create(julesVerne, { include: [Book] })
                        .then(function (author) {
                        return Author
                            .findById(author.id, { include: [Book] })
                            .then(function (_author) {
                            common_1.assertInstance(_author, julesVerne);
                            return _author.$remove('books', _author.books);
                        })
                            .then(function () { return Author.findById(author.id, { include: [Book] }); })
                            .then(function (_author) {
                            common_1.assertInstance(_author, {
                                name: julesVerne.name
                            });
                        });
                    });
                });
            });
        }
        describe('resolve foreign keys automatically', function () {
            var Book = /** @class */ (function (_super) {
                __extends(Book, _super);
                function Book() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Book.prototype, "title", void 0);
                __decorate([
                    index_1.BelongsToMany(function () { return Author; }, function () { return AuthorBook; }),
                    __metadata("design:type", Array)
                ], Book.prototype, "authors", void 0);
                Book = __decorate([
                    index_1.Table
                ], Book);
                return Book;
            }(index_1.Model));
            var AuthorBook = /** @class */ (function (_super) {
                __extends(AuthorBook, _super);
                function AuthorBook() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.ForeignKey(function () { return Book; }),
                    __metadata("design:type", Number)
                ], AuthorBook.prototype, "bookId", void 0);
                __decorate([
                    index_1.ForeignKey(function () { return Author; }),
                    __metadata("design:type", Number)
                ], AuthorBook.prototype, "authorId", void 0);
                AuthorBook = __decorate([
                    index_1.Table
                ], AuthorBook);
                return AuthorBook;
            }(index_1.Model));
            var Author = /** @class */ (function (_super) {
                __extends(Author, _super);
                function Author() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Author.prototype, "name", void 0);
                __decorate([
                    index_1.BelongsToMany(function () { return Book; }, function () { return AuthorBook; }),
                    __metadata("design:type", Book)
                ], Author.prototype, "books", void 0);
                Author = __decorate([
                    index_1.Table
                ], Author);
                return Author;
            }(index_1.Model));
            manyToManyTestSuites(Book, Author, AuthorBook);
        });
        describe('set foreign keys automatically via options', function () {
            var Book4 = /** @class */ (function (_super) {
                __extends(Book4, _super);
                function Book4() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Book4.prototype, "title", void 0);
                __decorate([
                    index_1.BelongsToMany(function () { return Author4; }, {
                        through: function () { return AuthorBook4; }
                    }),
                    __metadata("design:type", Array)
                ], Book4.prototype, "authors", void 0);
                Book4 = __decorate([
                    index_1.Table
                ], Book4);
                return Book4;
            }(index_1.Model));
            var AuthorBook4 = /** @class */ (function (_super) {
                __extends(AuthorBook4, _super);
                function AuthorBook4() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.ForeignKey(function () { return Book4; }),
                    __metadata("design:type", Number)
                ], AuthorBook4.prototype, "bookId", void 0);
                __decorate([
                    index_1.ForeignKey(function () { return Author4; }),
                    __metadata("design:type", Number)
                ], AuthorBook4.prototype, "authorId", void 0);
                AuthorBook4 = __decorate([
                    index_1.Table
                ], AuthorBook4);
                return AuthorBook4;
            }(index_1.Model));
            var Author4 = /** @class */ (function (_super) {
                __extends(Author4, _super);
                function Author4() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Author4.prototype, "name", void 0);
                __decorate([
                    index_1.BelongsToMany(function () { return Book4; }, {
                        through: function () { return AuthorBook4; },
                    }),
                    __metadata("design:type", Book4)
                ], Author4.prototype, "books", void 0);
                Author4 = __decorate([
                    index_1.Table
                ], Author4);
                return Author4;
            }(index_1.Model));
            manyToManyTestSuites(Book4, Author4, AuthorBook4);
        });
        describe('set foreign keys explicitly', function () {
            var Book2 = /** @class */ (function (_super) {
                __extends(Book2, _super);
                function Book2() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Book2.prototype, "title", void 0);
                __decorate([
                    index_1.BelongsToMany(function () { return Author2; }, 'AuthorBook2', 'bookId', 'authorId'),
                    __metadata("design:type", Array)
                ], Book2.prototype, "authors", void 0);
                Book2 = __decorate([
                    index_1.Table
                ], Book2);
                return Book2;
            }(index_1.Model));
            var Author2 = /** @class */ (function (_super) {
                __extends(Author2, _super);
                function Author2() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Author2.prototype, "name", void 0);
                __decorate([
                    index_1.BelongsToMany(function () { return Book2; }, 'AuthorBook2', 'authorId', 'bookId'),
                    __metadata("design:type", Book2)
                ], Author2.prototype, "books", void 0);
                Author2 = __decorate([
                    index_1.Table
                ], Author2);
                return Author2;
            }(index_1.Model));
            manyToManyTestSuites(Book2, Author2);
        });
        describe('set foreign keys explicitly via options', function () {
            var Book3 = /** @class */ (function (_super) {
                __extends(Book3, _super);
                function Book3() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Book3.prototype, "title", void 0);
                __decorate([
                    index_1.BelongsToMany(function () { return Author3; }, {
                        through: 'AuthorBook3',
                        foreignKey: 'bookId',
                        otherKey: 'authorId',
                    }),
                    __metadata("design:type", Array)
                ], Book3.prototype, "authors", void 0);
                Book3 = __decorate([
                    index_1.Table
                ], Book3);
                return Book3;
            }(index_1.Model));
            var Author3 = /** @class */ (function (_super) {
                __extends(Author3, _super);
                function Author3() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Author3.prototype, "name", void 0);
                __decorate([
                    index_1.BelongsToMany(function () { return Book3; }, {
                        through: 'AuthorBook3',
                        foreignKey: 'authorId',
                        otherKey: 'bookId',
                    }),
                    __metadata("design:type", Book3)
                ], Author3.prototype, "books", void 0);
                Author3 = __decorate([
                    index_1.Table
                ], Author3);
                return Author3;
            }(index_1.Model));
            manyToManyTestSuites(Book3, Author3);
        });
    });
    describe('One-to-one', function () {
        var userWithAddress = {
            name: 'Sherlock Holmes',
            address: {
                street: 'Bakerstreet',
                city: 'London',
                zipCode: '12345',
                country: 'England',
            }
        };
        var emancipatedAddress = {
            street: 'Bakerstreet',
            city: 'London',
            zipCode: '12345',
            country: 'England',
            user: {
                name: 'hng?'
            }
        };
        var petersAddress = {
            street: '738 Winter Garden DriveForest Hills',
            city: 'New York',
            zipCode: '12345',
            country: 'United States',
        };
        var petersOtherAddress = {
            street: '137 Chrystie Street',
            city: 'New York',
            zipCode: '12345',
            country: 'United States',
        };
        function oneToOneTestSuites(User, Address) {
            sequelize.addModels([User, Address]);
            beforeEach(function () { return sequelize.sync({ force: true }); });
            it('should create models with specified relations', function () {
                chai_1.expect(User)
                    .to.have.property('associations')
                    .that.has.property('address')
                    .that.is.an.instanceOf(Association['HasOne'])
                    .and.has.property('foreignKey', 'userId');
                chai_1.expect(Address)
                    .to.have.property('associations')
                    .that.has.property('user')
                    .that.is.an.instanceOf(Association['BelongsTo'])
                    .and.has.property('foreignKey', 'userId');
            });
            it('should create models with generated functions on its prototype', function () {
                association_1.expectAutoGeneratedFunctions(User, { singular: 'address' });
                association_1.expectAutoGeneratedFunctions(Address, { singular: 'user' });
            });
            describe('create()', function () {
                it('should create instances and relation between', function () {
                    return Promise.all([
                        User.create(userWithAddress, { include: [Address] })
                            .then(function (user) {
                            common_1.assertInstance(user, userWithAddress);
                        }),
                        Address.create(emancipatedAddress, { include: [User] })
                            .then(function (address) {
                            common_1.assertInstance(address, emancipatedAddress);
                        })
                    ]);
                });
                it('should create instances without relation', function () {
                    return User
                        .create(userWithAddress)
                        .then(function (user) {
                        chai_1.expect(user)
                            .to.have.property('id')
                            .that.is.not.null;
                        chai_1.expect(user)
                            .not.to.have.property('address');
                    });
                });
            });
            describe('findById()', function () {
                it('should find instances with related instances', function () {
                    return Promise.all([
                        User.create(userWithAddress, { include: [Address] })
                            .then(function (user) { return User.findById(user.id, { include: [Address] }); })
                            .then(function (user) {
                            common_1.assertInstance(user, userWithAddress);
                        }),
                        Address.create(emancipatedAddress, { include: [User] })
                            .then(function (address) { return Address.findById(address.id, { include: [User] }); })
                            .then(function (address) {
                            common_1.assertInstance(address, emancipatedAddress);
                        })
                    ]);
                });
            });
            describe('findOne()', function () {
                it('should find instances with related instances', function () {
                    return Promise.all([
                        User.create(userWithAddress, { include: [Address] })
                            .then(function (user) { return User.findOne({ include: [Address], where: { id: user.id } }); })
                            .then(function (user) {
                            common_1.assertInstance(user, userWithAddress);
                        }),
                        Address.create(emancipatedAddress, { include: [User] })
                            .then(function (address) { return Address.findOne({ include: [User], where: { id: address.id } }); })
                            .then(function (address) {
                            common_1.assertInstance(address, emancipatedAddress);
                        })
                    ]);
                });
            });
            describe('findAll()', function () {
                it('should find instances with related instances', function () {
                    return Promise.all([
                        User.create(userWithAddress, { include: [Address] })
                            .then(function (user) { return User.findAll({ include: [Address], where: { id: user.id } }); })
                            .then(function (users) {
                            common_1.assertInstance(users[0], userWithAddress);
                        }),
                        Address.create(emancipatedAddress, { include: [User] })
                            .then(function (address) { return Address.findAll({ include: [User], where: { id: address.id } }); })
                            .then(function (addresses) {
                            common_1.assertInstance(addresses[0], emancipatedAddress);
                        })
                    ]);
                });
            });
            describe('$get', function () {
                it('should get related instances of source instance', function () {
                    return Promise
                        .all([
                        User.create(userWithAddress, { include: [Address] })
                            .then(function (user) { return User.findById(user.id); })
                            .then(function (user) {
                            return user
                                .$get('address')
                                .then(function (address) {
                                common_1.assertInstance(address, userWithAddress.address);
                            });
                        }),
                        Address.create(emancipatedAddress, { include: [User] })
                            .then(function (author) { return Address.findById(author.id); })
                            .then(function (author) {
                            return author
                                .$get('user')
                                .then(function (user) {
                                common_1.assertInstance(user, emancipatedAddress.user);
                            });
                        })
                    ]);
                });
            });
            describe('$set', function () {
                it('should set relation between specified instances and source instance', function () {
                    return Promise
                        .all([
                        User.create(elisa),
                        Address.create(petersAddress)
                    ])
                        .then(function (_a) {
                        var user = _a[0], address = _a[1];
                        return user
                            .$set('address', address)
                            .then(function () { return User.findById(user.id, { include: [Address] }); })
                            .then(function (_user) {
                            common_1.assertInstance(_user, Object.assign({ address: petersAddress }, elisa));
                        });
                    });
                });
                it('should override previous relations', function () {
                    return Promise
                        .all([
                        User.create(elisa),
                        Address.create(petersAddress),
                        Address.create(petersOtherAddress),
                    ])
                        .then(function (_a) {
                        var user = _a[0], address1 = _a[1], address2 = _a[2];
                        return user
                            .$set('address', address1)
                            .then(function () { return User.findById(user.id, { include: [Address] }); })
                            .then(function (_user) {
                            common_1.assertInstance(_user, Object.assign({ address: petersAddress }, elisa));
                        })
                            .then(function () { return user.$set('address', address2); })
                            .then(function () { return User.findById(user.id, { include: [Address] }); })
                            .then(function (_user) {
                            // and check, if there are overridden
                            common_1.assertInstance(_user, Object.assign({ address: petersOtherAddress }, elisa));
                        });
                    });
                });
            });
            describe('$create', function () {
                it('should create new instance and add relation between new instance and source instance (has one)', function () {
                    return User.create(elisa)
                        .then(function (user) {
                        return user
                            .$create('address', Object.assign({}, petersAddress))
                            .then(function (address) {
                            common_1.assertInstance(address, petersAddress);
                        })
                            .then(function () { return User.findById(user.id, { include: [Address] }); })
                            .then(function (_user) {
                            common_1.assertInstance(_user, Object.assign({ address: petersAddress }, elisa));
                        });
                    });
                });
                it('should create new instance and add relation between new instance and source instance (belongs to)', function () {
                    return Address.create(petersAddress)
                        .then(function (address) {
                        return address
                            .$create('user', Object.assign({}, elisa))
                            .then(function () { return Address.findById(address.id, { include: [User] }); })
                            .then(function (_address) {
                            common_1.assertInstance(_address, Object.assign({ user: elisa }, petersAddress));
                        });
                    });
                });
            });
        }
        describe('resolve foreign keys automatically', function () {
            var User = /** @class */ (function (_super) {
                __extends(User, _super);
                function User() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], User.prototype, "name", void 0);
                __decorate([
                    index_1.HasOne(function () { return Address; }),
                    __metadata("design:type", Object)
                ], User.prototype, "address", void 0);
                User = __decorate([
                    index_1.Table
                ], User);
                return User;
            }(index_1.Model));
            var Address = /** @class */ (function (_super) {
                __extends(Address, _super);
                function Address() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address.prototype, "street", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address.prototype, "zipCode", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address.prototype, "city", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address.prototype, "country", void 0);
                __decorate([
                    index_1.ForeignKey(function () { return User; }),
                    __metadata("design:type", Number)
                ], Address.prototype, "userId", void 0);
                __decorate([
                    index_1.BelongsTo(function () { return User; }),
                    __metadata("design:type", User)
                ], Address.prototype, "user", void 0);
                Address = __decorate([
                    index_1.Table
                ], Address);
                return Address;
            }(index_1.Model));
            oneToOneTestSuites(User, Address);
        });
        describe('set foreign keys explicitly', function () {
            var User2 = /** @class */ (function (_super) {
                __extends(User2, _super);
                function User2() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], User2.prototype, "name", void 0);
                __decorate([
                    index_1.HasOne(function () { return Address2; }, 'userId'),
                    __metadata("design:type", Object)
                ], User2.prototype, "address", void 0);
                User2 = __decorate([
                    index_1.Table
                ], User2);
                return User2;
            }(index_1.Model));
            var Address2 = /** @class */ (function (_super) {
                __extends(Address2, _super);
                function Address2() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address2.prototype, "street", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address2.prototype, "zipCode", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address2.prototype, "city", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address2.prototype, "country", void 0);
                __decorate([
                    index_1.BelongsTo(function () { return User2; }, 'userId'),
                    __metadata("design:type", User2)
                ], Address2.prototype, "user", void 0);
                Address2 = __decorate([
                    index_1.Table
                ], Address2);
                return Address2;
            }(index_1.Model));
            oneToOneTestSuites(User2, Address2);
        });
        function oneToOneWithOptionsTestSuites(User, Address, alternateName, onDeleteAction) {
            if (alternateName === void 0) { alternateName = false; }
            if (onDeleteAction === void 0) { onDeleteAction = 'CASCADE'; }
            var foreignKey = alternateName ? 'user_id' : 'userId';
            beforeEach(function () {
                sequelize.addModels([User, Address]);
                return sequelize.sync({ force: true });
            });
            it('should create models with specified relations', function () {
                chai_1.expect(User)
                    .to.have.property('associations')
                    .that.has.property('address')
                    .that.is.an.instanceOf(Association['HasOne'])
                    .which.includes({ foreignKey: foreignKey })
                    .and.has.property('foreignKeyAttribute')
                    .which.includes({ allowNull: false, name: foreignKey });
                chai_1.expect(User)
                    .to.have.property('associations')
                    .that.has.property('address')
                    .that.has.property('options')
                    .with.property('onDelete', onDeleteAction);
                chai_1.expect(Address)
                    .to.have.property('associations')
                    .that.has.property('user')
                    .that.is.an.instanceOf(Association['BelongsTo'])
                    .which.includes({ foreignKey: foreignKey })
                    .and.has.property('foreignKeyAttribute')
                    .which.includes({ allowNull: false, name: foreignKey });
                chai_1.expect(Address)
                    .to.have.property('associations')
                    .that.has.property('user')
                    .that.has.property('options')
                    .with.property('onDelete', onDeleteAction);
            });
            describe('create()', function () {
                it('should fail creating instances that require a primary key', function () {
                    return Address.create(petersAddress, { include: [User] })
                        .catch(function (err) { return chai_1.expect(err.message).to.match(new RegExp("notNull Violation: " + foreignKey + " cannot be null")); });
                });
                it('should create instances that require a parent primary key', function () {
                    return User.create(userWithAddress, { include: [Address] })
                        .then(function (actual) {
                        common_1.assertInstance(actual, userWithAddress);
                    });
                });
            });
        }
        describe('resolve foreign keys automatically with association options', function () {
            var ON_DELETE_ACTION = 'SET NULL';
            var User3 = /** @class */ (function (_super) {
                __extends(User3, _super);
                function User3() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], User3.prototype, "name", void 0);
                __decorate([
                    index_1.HasOne(function () { return Address3; }, { foreignKey: { allowNull: false }, onDelete: ON_DELETE_ACTION }),
                    __metadata("design:type", Object)
                ], User3.prototype, "address", void 0);
                User3 = __decorate([
                    index_1.Table
                ], User3);
                return User3;
            }(index_1.Model));
            var Address3 = /** @class */ (function (_super) {
                __extends(Address3, _super);
                function Address3() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address3.prototype, "street", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address3.prototype, "zipCode", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address3.prototype, "city", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address3.prototype, "country", void 0);
                __decorate([
                    AllowNull_1.AllowNull(false),
                    index_1.ForeignKey(function () { return User3; }),
                    index_1.Column,
                    __metadata("design:type", Number)
                ], Address3.prototype, "userId", void 0);
                __decorate([
                    index_1.BelongsTo(function () { return User3; }, { foreignKey: { allowNull: false }, onDelete: ON_DELETE_ACTION }),
                    __metadata("design:type", User3)
                ], Address3.prototype, "user", void 0);
                Address3 = __decorate([
                    index_1.Table
                ], Address3);
                return Address3;
            }(index_1.Model));
            oneToOneWithOptionsTestSuites(User3, Address3, false, ON_DELETE_ACTION);
        });
        describe('set foreign keys explicitly with association options', function () {
            var User4 = /** @class */ (function (_super) {
                __extends(User4, _super);
                function User4() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], User4.prototype, "name", void 0);
                __decorate([
                    index_1.HasOne(function () { return Address4; }, { foreignKey: { allowNull: false, name: 'user_id' }, onDelete: 'CASCADE' }),
                    __metadata("design:type", Object)
                ], User4.prototype, "address", void 0);
                User4 = __decorate([
                    index_1.Table
                ], User4);
                return User4;
            }(index_1.Model));
            var Address4 = /** @class */ (function (_super) {
                __extends(Address4, _super);
                function Address4() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address4.prototype, "street", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address4.prototype, "zipCode", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address4.prototype, "city", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address4.prototype, "country", void 0);
                __decorate([
                    index_1.BelongsTo(function () { return User4; }, {
                        foreignKey: { allowNull: false, name: 'user_id' },
                        onDelete: 'CASCADE',
                    }),
                    __metadata("design:type", User4)
                ], Address4.prototype, "user", void 0);
                Address4 = __decorate([
                    index_1.Table
                ], Address4);
                return Address4;
            }(index_1.Model));
            oneToOneWithOptionsTestSuites(User4, Address4, true);
        });
        describe('set foreign keys explicitly via options', function () {
            var User5 = /** @class */ (function (_super) {
                __extends(User5, _super);
                function User5() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], User5.prototype, "name", void 0);
                __decorate([
                    index_1.HasOne(function () { return Address5; }, { foreignKey: 'userId' }),
                    __metadata("design:type", Object)
                ], User5.prototype, "address", void 0);
                User5 = __decorate([
                    index_1.Table
                ], User5);
                return User5;
            }(index_1.Model));
            var Address5 = /** @class */ (function (_super) {
                __extends(Address5, _super);
                function Address5() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address5.prototype, "street", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address5.prototype, "zipCode", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address5.prototype, "city", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address5.prototype, "country", void 0);
                __decorate([
                    index_1.BelongsTo(function () { return User5; }, { foreignKey: 'userId' }),
                    __metadata("design:type", User5)
                ], Address5.prototype, "user", void 0);
                Address5 = __decorate([
                    index_1.Table
                ], Address5);
                return Address5;
            }(index_1.Model));
            oneToOneTestSuites(User5, Address5);
        });
        describe('set foreign keys explicitly with association options (allowNull: false on foreignKey)', function () {
            var User6 = /** @class */ (function (_super) {
                __extends(User6, _super);
                function User6() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], User6.prototype, "name", void 0);
                __decorate([
                    index_1.HasOne(function () { return Address6; }, { foreignKey: { allowNull: false } }),
                    __metadata("design:type", Object)
                ], User6.prototype, "address", void 0);
                User6 = __decorate([
                    index_1.Table
                ], User6);
                return User6;
            }(index_1.Model));
            var Address6 = /** @class */ (function (_super) {
                __extends(Address6, _super);
                function Address6() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address6.prototype, "street", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address6.prototype, "zipCode", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address6.prototype, "city", void 0);
                __decorate([
                    index_1.Column,
                    __metadata("design:type", String)
                ], Address6.prototype, "country", void 0);
                __decorate([
                    index_1.ForeignKey(function () { return User6; }),
                    AllowNull_1.AllowNull(false),
                    index_1.Column({ field: 'user_id' }),
                    __metadata("design:type", Number)
                ], Address6.prototype, "userId", void 0);
                __decorate([
                    index_1.BelongsTo(function () { return User6; }, {
                        onDelete: 'CASCADE',
                        foreignKey: { allowNull: false }
                    }),
                    __metadata("design:type", User6)
                ], Address6.prototype, "user", void 0);
                Address6 = __decorate([
                    index_1.Table
                ], Address6);
                return Address6;
            }(index_1.Model));
            oneToOneWithOptionsTestSuites(User6, Address6, false);
        });
    });
});
//# sourceMappingURL=association.spec.js.map